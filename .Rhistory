install.packages(lib,
dependencies=TRUE,
repos='http://cran.rstudio.com/') }
suppressMessages( library(lib, character.only=TRUE) )
}
}
packs <- c("MCMCpack", "tmvtnorm", "truncnorm")
packs2 <- c("gmm", "devtools", "reshape2",
"dplyr")
loadPkg(c(packs, packs2))
devtools::install_github("dasiegel/Theory-IRT/")
devtools::install_github("dasiegel/Theory-IRT")
## Move to the working directory where you downloaded the proto-package code:
setwd("~/Dropbox/Research/Interventions/Theory-IRT/") ## WD for package install
install.packages('IRTM',
repos=NULL,
type='source')
library(IRTM)
source("./IRTM-local/R/anchors.R")## Path to the local installation
## Switch back to the data and analysis scripts
setwd("~/Dropbox/Interventions/Eurobarometer94.3/Vignette/")
dataPath <- "~/Dropbox/Interventions/Eurobarometer94.3/Data/"
M <- readRDS(paste0(dataPath,
"EB_M.rds"))
Y <- readRDS(paste0(dataPath,
"EB_Y.rds"))
dim(M)
dim(M)[3]
dim(Y)[2] == dim(M[3])
is_equal(dim(Y)[2] == dim(M[3]))
identical(dim(Y)[2], dim(M[3]))
dim(Y)
dim(Y)[2]
dim(M)[3]
dim(Y)[2] == dim(M)[3]
dim
identical(dim(Y)[2], dim(M[3]))
if(dim(Y)[2] == dim(M)[3]){
print("Dimension check, passed!")
}else(
print("Check dimensions of Y and M!")
)
dim(Y)
dim(M)
print(d)
## Finalize processing:
l2<-pair_gen_anchors(M,5)
l3 <- anchors(l2, Y) ## NB: Anchors creates Yall with the anchor points first
d_which_fix<-1:nrow(l3$Yfake)
d_theta_fix<-l2$theta_fake
## Note: the following configuration is a toy configuration
## It is designed for speed and illustrating the package
## For research purposes, you need to increase the number of iterations
d <- 6
nsamp= 10^3
nburn=20^1
## Quick dimension check, to save debugging time:
if(dim(Y)[2] == dim(M)[3]){
print("Dimension check, passed!")
}else(
print("Check dimensions of Y and M!")
)
print(d)
dim(M)[1] == d
if(dim(M)[1] == d &&
dim(M)[2]==d){
print("M and d dimension checks, passed!")
}else(
print("M not dxd, check processing")
)
d <- 6
nsamp= 10^3
nburn=20^1
## Quick dimension check, to save debugging time:
if(dim(Y)[2] == dim(M)[3]){
print("length M = length Y check, passed!")
}else(
print("Length Y not equal length M, check processing")
)
## Make sure M is a list of dxd matricies:
if(dim(M)[1] == d &&
dim(M)[2]==d){
print("M and d dimension checks, passed!")
}else(
print("M not dxd, check processing")
)
## One we have all of the elements verified, we can
irt <- M_constrained_irt(Y=l3$Yall,
d=d,
M=abs(M)*2,
theta_fix = d_theta_fix,
which_fix = d_which_fix,
nburn=nburn,
nsamp=nsamp,
thin=1,
learn_Omega=TRUE)
names(irt) ## theta, lambda, "b", "Sigma", "Omega"
avgthetas <- apply(irt$theta, c(1,2), mean)
end.of.anchors <- dim(l2$Yfake)[1]+1
avgthetas <- avgthetas[end.of.anchors:dim(avgthetas)[1],]
dim(avgthetas)
idvs <- read.csv(paste0(dataPath,
"ebdatDemographVaribs.csv"))
thetas <- cbind(avgthetas, idvs)
dim(thetas)
head(thetas)
dim(thetas)
head(thetas)
## rename the Theta estimates:
colnames(thetas)[1:6] <- paste0("Theta", 1:6)
head(thetas)
## Make factors where important:
thetas$mediatrust <- as.factor(thetas$mediatrust)
thetas$class <- as.factor(thetas$class)
thetas$polorient <- as.factor(thetas$polorient)
thetas$isocntry <- as.factor(thetas$isocntry)
colnames(thetas)[colnames(thetas)=="qb7_2"] <- "MoreBorderControl"
library(ggplot2)
library(ggridges)
library(RColorBrewer)
library(dplyr)
library(ggrepel)
library(ggplot2)
library(ggridges)
library(RColorBrewer)
library(dplyr)
library(ggrepel)
basedata <- melt(thetas[,1:6])
colnames(basedata) <- c("Theta", "Value")
basedata$Theta <- as.factor(basedata$Theta)
View(basedata)
cor(thetas$Theta1, thetas$Theta5)
cor(thetas$Theta3, thetas$Theta5)
class(irt$lambda)
dim(irt$lambda)
attributes(irt$lambda)
head(irt$lambda)
dim(irt$lambda)
tst <- as.data.frame(irt$lambda[,theta,])
tst <- as.data.frame(irt$lambda[,theta_id,])
theta_id <-  5 ## support immigration
tst <- as.data.frame(irt$lambda[,theta_id,])
View(tst)
View(tst)
lambda_weight <- as.data.frame(irt$lambda[,theta_id,]) %>%
rowwise() %>%
mutate(mean = mean(c_across(starts_with("V")), na.rm = TRUE),
var = var(c_across(starts_with("V")), na.rm = TRUE)) %>%
ungroup()
rm(tst)
View(M)
## questions x thetas x numsims
class(lambda)
## questions x thetas x numsims
class(irt$lambda)
dim(lambda_weight)
lambda_weight <- as.data.frame(irt$lambda[,theta_id,]) %>%
rowwise() %>%
mutate(mean = mean(c_across(starts_with("V")), na.rm = TRUE),
var = var(c_across(starts_with("V")), na.rm = TRUE)) %>%
ungroup()
dim(lambda_weight)
View(lambda_weight)
dim(irt$lambda[,theta_id,])
lambda_weight <- as.data.frame(irt$lambda[,theta_id,]) %>%
rowwise() %>%
mutate(mean = mean(c_across(starts_with("V")), na.rm = TRUE),
var = var(c_across(starts_with("V")), na.rm = TRUE)) %>%
select(mean, var) %>%
ungroup()
dim(lambda_weight)
lambda_weight <- as.data.frame(irt$lambda[,theta_id,]) %>%
rowwise() %>%
mutate(mean = mean(c_across(starts_with("V")), na.rm = TRUE),
variance = var(c_across(starts_with("V")), na.rm = TRUE)) %>%
select(mean, variance) %>%
ungroup()
dim(lambda_weight)
View(M)
MCodes <- read_csv(paste0(dataPath,
"Immigration_EB_MCodes.csv"))
MCodes <- tidyverse::read_csv(paste0(dataPath,
"Immigration_EB_MCodes.csv"))
MCodes <- dplyr::read_csv(paste0(dataPath,
"Immigration_EB_MCodes.csv"))
packs2 <- c("gmm", "devtools", "reshape2",
"dplyr", "tidyverse")
packs2 <- c("gmm", "devtools", "reshape2",
"dplyr", "tidyverse")
loadPkg(c(packs, packs2))
MCodes <- read_csv(paste0(dataPath,
"Immigration_EB_MCodes.csv"))
MCodes <- read_csv(paste0(dataPath,
"Immigration_EB_MCodes.csv"))
## Only keep M-Codes with loadings or outcomes:
MCodes$encoding <- rowSums(abs(MCodes[,4:9]))
MCodes <- MCodes[which(MCodes$encoding > 0),]
dim(MCodes) ## 355 x 10
dim(lambda_weight)
## Verify that the dimensions are the same:
dim(MCodes)[2] == dim(lambda_weight)[2]
## Verify that the dimensions are the same:
dim(MCodes)[2]
dim(lambda_weight)[2]
## Verify that the dimensions are the same:
dim(MCodes)[1] ==dim(lambda_weight)[1]
View(MCodes)
MCodes <- read_csv(paste0(dataPath,
"Immigration_EB_MCodes.csv"))
## Only keep M-Codes with loadings or outcomes:
MCodes$encoding <- rowSums(abs(MCodes[,4:9]))
MCodes <- MCodes[which(MCodes$encoding > 0),]
## Verify that the data objects have the same length:
dim(MCodes)[1] == dim(lambda_weight)[1]
colnames(MCodes)
colnames(MCodes)
View(MCodes)
View(lambda_weight)
t_five <- as.data.frame(cbind(question= as.character(MCodes$QMap),
substantive = as.character(MCodes$SubstantiveNotes),
mean= round(as.numeric(lambda_weight$mean),3),
variance= round(as.numeric(lambda_weight$variance),3),
theta= theta_id)) ## round for readability
t_five <- as.data.frame(cbind(question= as.character(MCodes$QMap),
substantive = as.character(MCodes$SubstantiveNotes),
mean= round(as.numeric(lambda_weight$mean),3),
variance= round(as.numeric(lambda_weight$variance),3),
theta= theta_id)) %>%
arrange(desc(mean))
head(t_five)
theta_id <-  1 ##
## Key:
## 1: culture threat
## 2: immigration threat
## 3: economic threat
## 4: health threat
## 5:  support immigration
## 6: support EU
lambda_weight <- as.data.frame(irt$lambda[,theta_id,]) %>%
rowwise() %>%
mutate(mean = mean(c_across(starts_with("V")), na.rm = TRUE),
variance = var(c_across(starts_with("V")), na.rm = TRUE)) %>%
select(mean, variance) %>%
ungroup()
dim(lambda_weight)
## Connect to human-readable question
## codes:
MCodes <- read_csv(paste0(dataPath,
"Immigration_EB_MCodes.csv"))
## Only keep M-Codes with loadings or outcomes:
MCodes$encoding <- rowSums(abs(MCodes[,4:9]))
MCodes <- MCodes[which(MCodes$encoding > 0),]
## Verify that the data objects have the same length:
dim(MCodes)[1] == dim(lambda_weight)[1]
t_five <- as.data.frame(cbind(question= as.character(MCodes$QMap),
substantive = as.character(MCodes$SubstantiveNotes),
mean= round(as.numeric(lambda_weight$mean),3),
variance= round(as.numeric(lambda_weight$variance),3),
theta= theta_id)) %>%
arrange(desc(mean))
head(t_five)
library(ggplot2)
library(ggridges)
library(RColorBrewer)
library(dplyr)
library(ggrepel)
basedata <- melt(thetas[,1:6])
colnames(basedata) <- c("Theta", "Value")
basedata$Theta <- as.factor(basedata$Theta)
gg <- ggplot(basedata,
aes(x=Value,
y=Theta,
fill=Theta))+
geom_density_ridges() +
scale_y_discrete(limits = rev(levels(basedata$Theta))) +
ggtitle('Posterior Distribution of Group Mean',
subtitle= "Thetas and Outcome") +
scale_fill_brewer(palette='Spectral') +
theme_bw()
gg
dat2 <- melt(thetas[,c(1:6, 17)])
colnames(dat2)[2] <- "Theta"
head(dat2)
head(dat2)
gg2 <- ggplot(dat2,
aes(x=value,
y=mediatrust,
fill=mediatrust))+
geom_density_ridges(alpha=.5) +
ggtitle('Posterior Distribution of Group Mean',
subtitle= "Thetas and Outcome") +
labs(y="Levels of Media Trust",
x= "Theta Posterior Estimates")+
scale_y_discrete(limits=rev(levels(dat2$mediatrust)))+
facet_wrap(~Theta, ncol=2)+
scale_fill_brewer(palette='Spectral') +
theme_bw()
gg2
dat3 <-  melt(thetas[,c(1:6, 16)])
colnames(dat3)[2] <- "Theta"
dat3$polorient <- factor(dat3$polorient,
levels=c("FarLeft",
"Left",
"Center",
"Right",
"FarRight",
"Refused/DNt"))
gg3 <- ggplot(dat3,
aes(x=value,
y=polorient,
fill=polorient))+
geom_density_ridges(alpha=.5) +
ggtitle('Posterior Distribution of Group Mean',
subtitle= "Thetas and Outcome") +
labs(y="Political Orientation",
x= "Theta Posterior Estimates")+
scale_y_discrete(limits=rev(levels(dat3$polorient)))+
facet_wrap(~Theta, ncol=2)+
scale_fill_brewer(palette='Spectral') +
theme_bw()
gg3
dat4 <-  melt(thetas[,c(1:6, 11)])
colnames(dat4)[2] <- "Theta"
dat4$class <- factor(dat4$class,
levels=c("Other/None/DN/Refused",
"WorkingClass",
"LowerMiddle",
"MiddleClass",
"UpperMiddleClass",
"UpperClass"))
gg5 <- ggplot(dat4,
aes(x=value,
y=class,
fill=class))+
geom_density_ridges(alpha=.5) +
ggtitle('Posterior Distribution of Group Mean',
subtitle= "Thetas and Outcome") +
labs(y="Self-Reported Social Class",
x= "Theta Posterior Estimates")+
scale_y_discrete(limits=rev(levels(dat4$class)))+
facet_wrap(~Theta, ncol=2)+
scale_fill_brewer(palette='Spectral') +
theme_bw()
gg5
library(Hmisc)
library(corrplot)
# Code to identify a specific covariate of interest:
colnames(thetas)[which(
colnames(thetas) =="d63")] <- "socialclass"
head(thetas)
corvars <- c("Theta1",
"Theta2",
"Theta3",
"Theta4",
"Theta5",
"Theta6",
"socialclass",
"MoreBorderControl",
"trusttradm",
"trustwebonly",
"trustallm",
"trustnom")
dat <- thetas[,corvars]
cors <- round(cor(dat),
digits = 3)
cors.pvalues <- rcorr(as.matrix(dat))
cors.pvalues
## Code for color-coded
## correlation plot from rbloggers
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 90,
number.font = 1,
number.cex = 1,
mar = c(0, 0, 0, 0)) {
library(corrplot)
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(mat,
method = "color", col = col(200), number.font = number.font,
mar = mar, number.cex = number.cex,
type = type, order = order,
addCoef.col = "black", # add correlation coefficient
tl.col = "black", tl.srt = tl.srt, # rotation of text labels
# combine with significance level
p.mat = p.mat, sig.level = sig.level, insig = "blank",
# hide correlation coefficiens on the diagonal
diag = diag
)
}
## Code for color-coded
## correlation plot from rbloggers
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 90,
number.font = 1,
number.cex = 1,
mar = c(0, 0, 0, 0)) {
library(corrplot)
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(mat,
method = "color", col = col(200), number.font = number.font,
mar = mar, number.cex = number.cex,
type = type, order = order,
addCoef.col = "black", # add correlation coefficient
tl.col = "black", tl.srt = tl.srt, # rotation of text labels
# combine with significance level
p.mat = p.mat, sig.level = sig.level, insig = "blank",
# hide correlation coefficiens on the diagonal
diag = diag
)
}
colnames(dat)[7:12] <- c("S.Class",
"MoreBorderCont",
"MediaTrustTradOnly",
"MediaTrustWebOnly",
"MediaTrustAll",
"MediaTrustNone")
## Drop small # of misleading values:
dat[which(dat$S.Class > 5),
"S.Class"] <-NA
dat[which(dat$MoreBorderCont > 2),
"MoreBorderCont"] <- NA
table(thetas$socialclass)
table(dat$S.Class)
table(dat$MoreBorderCont) ## 1= for; 2=against
corrplot2(
data = dat,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 75
)
View(gg)
ggsave(gg2,
file="theta_media_trust.png")
ggsave(gg,
file="theta_dist.png")
install.packages("testthat")
library(testthat)
usethis::use_testthat(3)
getwd()
cd
setwd("~/Dropbox/Research/Interventions/"))
setwd("~/Dropbox/Research/Interventions/")
setwd("~/Dropbox/Research/Interventions/Theory-IRT/")
getwd()
usethis::use_vignette("my-vignette")
etwd("~/Dropbox/Research/Interventions/Theory-IRT/IRTM")
getwd("~/Dropbox/Research/Interventions/Theory-IRT/IRTM/")
setwd("~/Dropbox/Research/Interventions/Theory-IRT/IRTM")
usethis::use_vignette("my-vignette")
getwd()
setwd("~/Dropbox/Research/Interventions/Theory-IRT/IRTM/")
getwd()
usethis::use_vignette("my-vignette")
getwd()
install(build_vignettes = TRUE)
devtools::load_all()
devtools::build_rmd("vignettes/introduction.Rmd")
devtools::build_rmd("vignettes/my-vignette.Rmd")
devtools::build_rmd("vignettes/introduction.Rmd")
devtools::build_rmd("vignettes/introduction.Rmd")
devtools::build_rmd("vignettes/introduction.Rmd")
usethis::use_pkgdown()
library(pkgdown)
usethis::use_pkgdown()
