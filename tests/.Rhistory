"EB_M.rds"))
Y <- readRDS(paste0(dataPath,
"EB_Y.rds"))
l2<-pair_gen_anchors(M,5)
l3 <- anchors(l2, Y) ## NB: Anchors creates Yall with the anchor points first
d_which_fix<-1:nrow(l3$Yfake)
d_theta_fix<-l2$theta_fake
d <- 6
nsamp= 10^2
nburn=2^1
if(dim(Y)[2] == dim(M)[3]){
print("length M = length Y check, passed!")
}else(
print("Length Y not equal length M, check processing")
)
dim(M)
dim(Y) ##
m2 = M[ , , 223:230]
m2 = M[ , , 223:230]
y2 = Y[ 225:250, 223:230 ]
View(y2)
l2<-pair_gen_anchors(m2,5)
l3 <- anchors(l2, y2
l3 <- anchors(l2, y2) ## NB: Anchors creates Yall with the anchor points first
d_which_fix<-1:nrow(l3$Yfake)
l2<-pair_gen_anchors(m2,5)
l3 <- anchors(l2, y2) ## NB: Anchors creates Yall with the anchor points first
l2<-pair_gen_anchors(m2,5)
l3 <- anchors(l2, y2) ## NB: Anchors creates Yall with the anchor points first
d_which_fix<-1:nrow(l3$Yfake)
d_theta_fix<-l2$theta_fake
d <- 6
nsamp= 10^2
nburn=2^1
irt <- M_constrained_irt(Y=l3$Yall,
d=d,
M=abs(m2)*2,
theta_fix = d_theta_fix,
which_fix = d_which_fix,
nburn=nburn,
nsamp=nsamp,
thin=1,
learn_Omega=TRUE)
names(irt) ## theta, lambda, "b", "Sigma", "Omega"
save(m2, "m_test.Rds") ## save test M data
save(m2, file="m_test.Rds") ## save test M data
save(y2, file="y_test.Rds") ## save test Y data
dim(irt$theta)
getwd()
rm(list=ls())
setwd("/Users/Promachos/Dropbox (Personal)/Research/Interventions/Theory-IRT/IRTM/tests")
library(IRTM)
source("~/Dropbox/Research/Interventions/Theory-IRT/IRTM-local/R/anchors.R") ## helper function
dim(M) ## 6x6x355
M <- readRDS(paste0(dataPath,
"EB_M.rds"))
M = readRDS("m_test.Rds")
M = readRDS("m_test.Rds")
## random slice from the Eurobarometer data:
M = readRDS("./m_test.Rds")
Y = readRDS("./y_test.Rds")
## random slice from the Eurobarometer data:
M <-  readRDS("m_test.Rds")
## random slice from the Eurobarometer data:
M <-  readRDS("m_test.rds")
Y <-  readRDS("y_test.rds")
getwd()
## random slice from the Eurobarometer data:
M <-  readRDS(file = "m_test.Rds")
## random slice from the Eurobarometer data:
M <-  readRDS(file = "m_test.rds")
rm(list=ls())
dataPath <- "~/Dropbox/Interventions/Eurobarometer94.3/Data/"
M <- readRDS(paste0(dataPath,
"EB_M.rds"))
Y <- readRDS(paste0(dataPath,
"EB_Y.rds"))
dim(M) ## 6x6x355
dim(Y) ## 38718 x 355
m2 = M[ , , 223:230]
y2 = Y[ 225:250, 223:230 ]
save(m2, file="m_test.Rds") ## save test M data
save(y2, file="y_test.Rds") ## save test Y data
readRDS("m_test.Rds")
M = readRDS("m_test.rds")
save(m2, file="m_test.rds") ## save test M data
M = readRDS("m_test.rds")
save(m2, file="m_test.rds") ## save test M data
save(y2, file="y_test.rds") ## save test Y data
M = readRDS("m_test.rds")
M = load("m_test.rds")
Y = load("y_test.rds")
View(y2)
rm(list=ls())
setwd("/Users/Promachos/Dropbox (Personal)/Research/Interventions/Theory-IRT/IRTM/tests")
M = load("m_test.rds")
Y = load("y_test.rds")
class(M)
rm(list=ls())
setwd("/Users/Promachos/Dropbox (Personal)/Research/Interventions/Theory-IRT/IRTM/tests")
library(testthat)
library(IRTM)
source("~/Dropbox/Research/Interventions/Theory-IRT/IRTM-local/R/anchors.R") ## helper function
### Create test data:
dataPath <- "~/Dropbox/Interventions/Eurobarometer94.3/Data/"
M <- readRDS(paste0(dataPath,
"EB_M.rds"))
Y <- readRDS(paste0(dataPath,
"EB_Y.rds"))
dim(M) ## 6x6x355
dim(Y) ## 38718 x 355
m2 = M[ , , 223:230]
## Save subset:
class(m2)
save(m2, file="m_test.rds") ## save test M data
M = load("m_test.rds")
getwd()
library(testthat)
library(IRTM)
#test_that("Test Case One: Normal Use", {
## Takes in a small M and Y dataset
M = load("../data/m_test.rds")
#test_that("Test Case One: Normal Use", {
## Takes in a small M and Y dataset
load("../data/m_test.rds")
rm(ls=lis())
rm(ls=list())
rm(list=ls())
#test_that("Test Case One: Normal Use", {
## Takes in a small M and Y dataset
load("../data/m_test.rds")
#test_that("Test Case One: Normal Use", {
## Takes in a small M and Y dataset
data("m_test.rds")
library(testthat)
library(IRTM)
library(testthat)
library(IRTM)
rm(list=ls())
library(testthat)
library(IRTM)
data("S109_coding_1")
data("S109_votes")
data("S109_rollcalls")
## helper function to format the data:
computeResponse = function (M_codes,votes,roll){
coding_ids = M_codes[1, ]
M_codes = M_codes[-1, ]
#   # Add voteview rollnumber identifier
M_codes$rollnumber = roll$rollnumber
# Recode response data
Y = reshape2::dcast(data.frame(r=votes$rollnumber,
id=votes$icpsr, v=votes$cast_code), id ~ r)
cid = Y$id
Y = Y[,-1]
Y[is.na(Y)] = 9
Y[Y == 2] = 1
Y[Y == 3] = 1
Y[Y == 4] = 0
Y[Y == 5] = 0
Y[Y == 6] = 0
Y[Y == 7] = 9
Y[Y == 8] = 9
N = nrow(Y)
K = ncol(Y)
codings = unique(as.numeric(coding_ids))
codings = codings[!is.na(codings)]
ds = sapply(codings, function(x) sum(coding_ids==x, na.rm=T))
Ms = sapply(ds, function(x) array(0, c(x, x, K)))
for (i in 1:K){
for(j in 1:length(Ms)){
Ms[[j]][,,i] = diag(M_codes[i, which(coding_ids == j)])
}
}
no_nays = which(apply(Y, 2, function(x) all(x != 0)))
Y = Y[,-no_nays]
## helper function to format the data:
computeResponse = function (M_codes,votes,roll){
coding_ids = M_codes[1, ]
M_codes = M_codes[-1, ]
#   # Add voteview rollnumber identifier
M_codes$rollnumber = roll$rollnumber
# Recode response data
Y = reshape2::dcast(data.frame(r=votes$rollnumber,
id=votes$icpsr, v=votes$cast_code), id ~ r)
cid = Y$id
Y = Y[,-1]
Y[is.na(Y)] = 9
Y[Y == 2] = 1
Y[Y == 3] = 1
Y[Y == 4] = 0
Y[Y == 5] = 0
Y[Y == 6] = 0
Y[Y == 7] = 9
Y[Y == 8] = 9
N = nrow(Y)
K = ncol(Y)
codings = unique(as.numeric(coding_ids))
codings = codings[!is.na(codings)]
ds = sapply(codings, function(x) sum(coding_ids==x, na.rm=T))
Ms = sapply(ds, function(x) array(0, c(x, x, K)))
for (i in 1:K){
for(j in 1:length(Ms)){
Ms[[j]][,,i] = diag(M_codes[i, which(coding_ids == j)])
}
}
no_nays = which(apply(Y, 2, function(x) all(x != 0)))
Y = Y[,-no_nays]
for (j in 1:length(Ms)){
Ms[[j]][is.na(Ms[[j]])] = 0
Ms[[j]] = Ms[[j]][,,-no_nays]
}
N = nrow(Y)
K = ncol(Y)
for (j in 1:length(ds)){
d = ds[j]
M = Ms[[j]]
exc = which(apply(M, 3, function(x) all(diag(x)==0)))
if (length(exc) == 0){
Yexc = Y
Mexc = M
}else{
Yexc = Y[, -exc]
Mexc = M[,,-exc]
}
}
excList<- list("Yexc" = Yexc, "Mexc" = Mexc,"d"=d)
return(excList)
}
anchors = function (tl, Yexc){
# generate anchor points
Yfake = tl[[1]]
Yfake[is.na(Yfake)] = 9
colnames(Yfake) = names(Yexc)
theta_fake = tl[[2]]
Yall = as.matrix(rbind(Yfake, Yexc))
YList<- list("Yall" = Yall, "Yfake" = Yfake)
return (YList)
}
l1<-computeResponse(S109_coding_1,S109_votes,S109_rollcalls)
l2<-pair_gen_anchors(l1$Mexc,5)
l3<-anchors(l2,l1$Yexc)
d_theta_fix<-l2$theta_fake
d_which_fix<-1:nrow(l3$Yfake)
rm(list=ls())
)
library(testthat)
rm(list=ls())
library(testthat)
library(IRTM)
data("S109_coding_1")
data("S109_votes")
data("S109_rollcalls")
force(S109_coding_1)
force(S109_rollcalls)
force(S109_votes)
## helper function to format the data:
computeResponse = function (M_codes,votes,roll){
coding_ids = M_codes[1, ]
M_codes = M_codes[-1, ]
## Add voteview rollnumber identifier
M_codes$rollnumber = roll$rollnumber
# Recode response data
Y = reshape2::dcast(data.frame(r=votes$rollnumber,
id=votes$icpsr, v=votes$cast_code), id ~ r)
cid = Y$id
Y = Y[,-1]
Y[is.na(Y)] = 9
Y[Y == 2] = 1
Y[Y == 3] = 1
Y[Y == 4] = 0
Y[Y == 5] = 0
Y[Y == 6] = 0
Y[Y == 7] = 9
Y[Y == 8] = 9
N = nrow(Y)
K = ncol(Y)
codings = unique(as.numeric(coding_ids))
codings = codings[!is.na(codings)]
ds = sapply(codings, function(x) sum(coding_ids==x, na.rm=T))
Ms = sapply(ds, function(x) array(0, c(x, x, K)))
for (i in 1:K){
for(j in 1:length(Ms)){
Ms[[j]][,,i] = diag(M_codes[i, which(coding_ids == j)])
}
}
no_nays = which(apply(Y, 2, function(x) all(x != 0)))
Y = Y[,-no_nays]
for (j in 1:length(Ms)){
Ms[[j]][is.na(Ms[[j]])] = 0
Ms[[j]] = Ms[[j]][,,-no_nays]
}
N = nrow(Y)
K = ncol(Y)
for (j in 1:length(ds)){
d = ds[j]
M = Ms[[j]]
exc = which(apply(M, 3, function(x) all(diag(x)==0)))
if (length(exc) == 0){
Yexc = Y
Mexc = M
}else{
Yexc = Y[, -exc]
Mexc = M[,,-exc]
}
}
excList<- list("Yexc" = Yexc, "Mexc" = Mexc,"d"=d)
return(excList)
}
anchors = function (tl, Yexc){
# generate anchor points
Yfake = tl[[1]]
Yfake[is.na(Yfake)] = 9
colnames(Yfake) = names(Yexc)
theta_fake = tl[[2]]
Yall = as.matrix(rbind(Yfake, Yexc))
YList<- list("Yall" = Yall, "Yfake" = Yfake)
return (YList)
}
l1<-computeResponse(S109_coding_1,S109_votes,S109_rollcalls)
l2<-pair_gen_anchors(l1$Mexc,5)
l3<-anchors(l2,l1$Yexc)
d_theta_fix<-l2$theta_fake
d_which_fix<-1:nrow(l3$Yfake)
irt<-M_constrained_irt(l3$Yall,l1$d,abs(l1$Mexc)*2,
theta_fix = d_theta_fix,
which_fix = d_which_fix
,nburn=100,
nsamp=100,thin=1,
learn_Omega=TRUE)
class(irt)
length(irt)
names(irt)
dim(irt$theta)
length((irt$theta))
length(l3$Yall)
View(S109_coding_1)
getwd()
test_dir("irtm_testb.R")
test_dir(".")
devtools::test() i
devtools::test()
devtools::test()
test_that("Test Case One: Normal Use", {
## Load the s109 sample data from the package:
data("S109_coding_1")
data("S109_votes")
data("S109_rollcalls")
## helper function to format the data:
computeResponse = function (M_codes,votes,roll){
coding_ids = M_codes[1, ]
M_codes = M_codes[-1, ]
## Add voteview rollnumber identifier
M_codes$rollnumber = roll$rollnumber
# Recode response data
Y = reshape2::dcast(data.frame(r=votes$rollnumber,
id=votes$icpsr, v=votes$cast_code), id ~ r)
cid = Y$id
Y = Y[,-1]
Y[is.na(Y)] = 9
Y[Y == 2] = 1
Y[Y == 3] = 1
Y[Y == 4] = 0
Y[Y == 5] = 0
Y[Y == 6] = 0
Y[Y == 7] = 9
Y[Y == 8] = 9
N = nrow(Y)
K = ncol(Y)
codings = unique(as.numeric(coding_ids))
codings = codings[!is.na(codings)]
ds = sapply(codings, function(x) sum(coding_ids==x, na.rm=T))
Ms = sapply(ds, function(x) array(0, c(x, x, K)))
for (i in 1:K){
for(j in 1:length(Ms)){
Ms[[j]][,,i] = diag(M_codes[i, which(coding_ids == j)])
}
}
no_nays = which(apply(Y, 2, function(x) all(x != 0)))
Y = Y[,-no_nays]
for (j in 1:length(Ms)){
Ms[[j]][is.na(Ms[[j]])] = 0
Ms[[j]] = Ms[[j]][,,-no_nays]
}
N = nrow(Y)
K = ncol(Y)
for (j in 1:length(ds)){
d = ds[j]
M = Ms[[j]]
exc = which(apply(M, 3, function(x) all(diag(x)==0)))
if (length(exc) == 0){
Yexc = Y
Mexc = M
}else{
Yexc = Y[, -exc]
Mexc = M[,,-exc]
}
}
excList<- list("Yexc" = Yexc, "Mexc" = Mexc,"d"=d)
return(excList)
}
anchors = function (tl, Yexc){
# generate anchor points
Yfake = tl[[1]]
Yfake[is.na(Yfake)] = 9
colnames(Yfake) = names(Yexc)
theta_fake = tl[[2]]
Yall = as.matrix(rbind(Yfake, Yexc))
YList<- list("Yall" = Yall, "Yfake" = Yfake)
return (YList)
}
l1<-computeResponse(S109_coding_1,S109_votes,S109_rollcalls)
l2<-pair_gen_anchors(l1$Mexc,5)
l3<-anchors(l2,l1$Yexc)
d_theta_fix<-l2$theta_fake
d_which_fix<-1:nrow(l3$Yfake)
irt<-M_constrained_irt(l3$Yall,
l1$d,abs(l1$Mexc)*2,
theta_fix = d_theta_fix,
which_fix = d_which_fix,
nburn=100,
nsamp=100,thin=1,
learn_Omega=TRUE)
expect_is(irt, "list")
expect_equal(length(irt), 5)
}) ## closes the test_that() call
expect_type(irt, "list")
test_that("Test Case One: Normal Use", {
## Load the s109 sample data from the package:
data("S109_coding_1")
data("S109_votes")
data("S109_rollcalls")
## helper function to format the data:
computeResponse = function (M_codes,votes,roll){
coding_ids = M_codes[1, ]
M_codes = M_codes[-1, ]
## Add voteview rollnumber identifier
M_codes$rollnumber = roll$rollnumber
# Recode response data
Y = reshape2::dcast(data.frame(r=votes$rollnumber,
id=votes$icpsr, v=votes$cast_code), id ~ r)
cid = Y$id
Y = Y[,-1]
Y[is.na(Y)] = 9
Y[Y == 2] = 1
Y[Y == 3] = 1
Y[Y == 4] = 0
Y[Y == 5] = 0
Y[Y == 6] = 0
Y[Y == 7] = 9
Y[Y == 8] = 9
N = nrow(Y)
K = ncol(Y)
codings = unique(as.numeric(coding_ids))
codings = codings[!is.na(codings)]
ds = sapply(codings, function(x) sum(coding_ids==x, na.rm=T))
Ms = sapply(ds, function(x) array(0, c(x, x, K)))
for (i in 1:K){
for(j in 1:length(Ms)){
Ms[[j]][,,i] = diag(M_codes[i, which(coding_ids == j)])
}
}
no_nays = which(apply(Y, 2, function(x) all(x != 0)))
Y = Y[,-no_nays]
for (j in 1:length(Ms)){
Ms[[j]][is.na(Ms[[j]])] = 0
Ms[[j]] = Ms[[j]][,,-no_nays]
}
N = nrow(Y)
K = ncol(Y)
for (j in 1:length(ds)){
d = ds[j]
M = Ms[[j]]
exc = which(apply(M, 3, function(x) all(diag(x)==0)))
if (length(exc) == 0){
Yexc = Y
Mexc = M
}else{
Yexc = Y[, -exc]
Mexc = M[,,-exc]
}
}
excList<- list("Yexc" = Yexc, "Mexc" = Mexc,"d"=d)
return(excList)
}
anchors = function (tl, Yexc){
# generate anchor points
Yfake = tl[[1]]
Yfake[is.na(Yfake)] = 9
colnames(Yfake) = names(Yexc)
theta_fake = tl[[2]]
Yall = as.matrix(rbind(Yfake, Yexc))
YList<- list("Yall" = Yall, "Yfake" = Yfake)
return (YList)
}
l1<-computeResponse(S109_coding_1,S109_votes,S109_rollcalls)
l2<-pair_gen_anchors(l1$Mexc,5)
l3<-anchors(l2,l1$Yexc)
d_theta_fix<-l2$theta_fake
d_which_fix<-1:nrow(l3$Yfake)
irt<-M_constrained_irt(l3$Yall,
l1$d,abs(l1$Mexc)*2,
theta_fix = d_theta_fix,
which_fix = d_which_fix,
nburn=100,
nsamp=100,thin=1,
learn_Omega=TRUE)
expect_type(irt, "list")
expect_equal(length(irt), 5)
}) ## closes the test_that() call
cd ../
cd ..
